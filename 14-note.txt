import turtle
t = turtle.Turtle()

def rect(x,y,a):
  t.up()
  t.home()
  t.forward(x)
  t.left(90)
  t.forward(y)
  t.down()
  for i in range(4):
    t.forward(a)
    t.left(-90)
#空行

t.clear()
rect(10,10,100)
rect(10,-110,100)
rect(-110,10,100)
rect(-110,-110,100)

関数:
複数の処理をひとまとめにしたもの
オブジェクト:
複数の性質と複数の関数をひとまとめにしたもの


import random

random.randint(1,6)

num = 12
random.randint(1,num)

class Dice:
  face_num = 6
  def shoot(self):
    return random.randint(1,self.face_num)
#空行

aDice = Dice()#クラスをもとにオブジェクトを作る
aDice.shoot()#オブジェクトを使う

aDice.face_num = 10000
aDice.shoot()

bDice = Dice()
bDice.shoot()

オブジェクト指向プログラミング
クラス:オブジェクトの設計図
-オブジェクト:データと操作をまとめたもの
クラス派生:クラスをもとに、別のクラスを作ること、新しいクラスは、もとのクラスの性質を「継承」する


dir..
dir.

dir > files.txt   「>」リダイレクト（書き込み）
dir .. > files.txt
dir >> files.txt  「>>」で追記

c\citのところにnum.pyというファイルを作成してから、
python num.pyとプロンプトで入力して実行すると、
プロンプト上でファイルが実行される。

python num.py > result.txtでnum.pyの実行結果をresult.txtというファイルを作成し、そこに記録する。

標準出力:画面に出力
-「>」を使ってファイルにリダイレクト
標準入力:キーボードから入力
-「<」を使ってファイルから入力
標準出力を標準入力につなぐ:
-「|」パイプ　並列処理ができる。
python num.py | python total.py
